/* Custom Makers */
window.maroonMarker = L.icon({ 
  iconUrl: '<%= (Rails.root + "/assets/leaflet/marker-maroon-icon.png").to_s %>',
  shadowUrl: '<%= (Rails.root + "/assets/leaflet/marker-shadow.png").to_s %>',
  popupAnchor:  [0, -35]
});

window.blueMarker = L.icon({
  iconUrl: '<%= (Rails.root + "/assets/leaflet/marker-icon.png").to_s %>',
  shadowUrl: '<%= (Rails.root + "/assets/leaflet/marker-shadow.png").to_s %>',
  popupAnchor:  [0, -35]
});

function init_map(dom, driftmap, blips){
	L.Icon.Default.imagePath = '<%= (Rails.root + "/assets/leaflet").to_s %>';
	try {
		var x = driftmap.init_x || 40.735;
		var y = driftmap.init_y || -73.890;
		var z = driftmap.init_zoom || 12;
		var m = window.map = L.map(dom).setView([x, y], z);

		// TODO make this API key a Server environment variable
		L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', 
			{	attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
	    	maxZoom: 18,
	    	id: 'eozelius77.j4hekake',
	    	accessToken: "<%= ENV['MAPBOX_SECRET_KEY'] %>"
			}).addTo(m);

		// Add blips to Map
		if(blips.length > 0){
			window.blipsIndexer = {}
			for(var i in blips){
				var id 		= xss_trim(blips[i].id); 
				var lat 	= xss_trim(blips[i].x);
				var lng 	= xss_trim(blips[i].y);
				var body 	= blips[i].body;
				var title = blips[i].title;
				var blipImages = [];
				for(var x in blips[i].images){
					blipImages.push(blips[i].images[x])
				}

				/* Build a carousel to go inside of the leaflet popup */
				var blip_images_carousel = '';
				if(blips[i].images.length > 0) {
					blip_images_carousel += '<div class="blip-images">' +
																			'<div id="popup-carousel" class="" data-ride="carousel">' + 
				  														'<div class="carousel-inner" role="listbox">';

					for(var x in blips[i].images)
						blip_images_carousel += '<div class="item">' + blips[i].images[x] + '</div>';

					blip_images_carousel += '</div>';
				}

				/* Leaflet Map blip properties */
				var popupOptions = {
					className: 'blip-popup'
				}
				var popupContent =  '<div class="blip-popup" data-blip="'+ id +'">' + 
															'<div class="blip-text">' +
																'<a href="/blips/'+ id +'">' +
																	'<h4 class="blip-popup-title instructions">'+ title +'</h4>' + 
																	'<span> - more</span>' +
																'</a>' +
																'<p class="blip-popup-body">'+ body +'</p>' + 
															'</div>' +
																blip_images_carousel +
															'</div></div>';

				var blipMarker = L.marker([lat, lng]).addTo(m);
				var blipPopup  = L.popup(popupOptions).setLatLng([lat, lng]).setContent(popupContent);
				blipMarker.bindPopup(blipPopup);
				/* End Leaflet Map blip properties */

				// once blip has been initialized add it to window.blipsIndexer object that all views can access 
				// window.blipsIndexer[blips[i].id.toString()] = {
				window.blipsIndexer[i] = {
					id: 	  id,
					title:  title,
					body:   body,
					images: blipImages,
					marker: blipMarker,
					popup:  blipPopup
				}
			}

			// Open first blip on map
			window.blipsIndexer[0].marker.setIcon(window.maroonMarker);
			window.blipsIndexer[0].popup.openOn(map);
		} // end Markers

/*		// Add routes to Map
		if(routes.length > 0){
			for(var i in routes){ 
				var title = xss_trim(routes[i].title);
				var description = xss_trim(routes[i].description);

				if(routes[i].routePoints.length > 0){

					var prevLat = xss_trim(routes[i].routePoints[0].x);
					var prevLng = xss_trim(routes[i].routePoints[0].y);
					var prevPt = L.latLng(prevLat, prevLng);

					for(var j in routes[i].routePoints){
						var lat 			= xss_trim(routes[i].routePoints[j].x);
						var lng 			= xss_trim(routes[i].routePoints[j].y);
						var order 		= xss_trim(routes[i].routePoints[j].order);
						var currentPt = L.latLng(lat, lng);

						if(j > 0){
							var routeLine  = L.polyline([prevPt, currentPt]).addTo(m);
							prevPt = currentPt;							
						}
					}					
				}
			}
		}*/

	} catch(e) {
		console.log('error: ' + e);
		flash_now('danger', 'whoops, something went wrong.  Please try again.')
		window.DMInitError = e;
	}	
}

function init_timeline (t, opts) {
	// Initialize Timeline
	window.timeline = new TL.Timeline('dm-timeline', t, opts);

	// TimelineJS3 does not do a great job of indexing slides, so I am manually indexing each slide of the timeline represented
	// by the DOM elements 
	// $('.tl-timemarker') = Flags at the bottom, on the timeline. 
	// $('.tl-slide.tl-slide-text-only') = the slide/content of the timeline

	// Begin Indexing
  var blipIds = [];
  for(var x in window.blipsIndexer)
    blipIds.push(window.blipsIndexer[x].id)

  $('.tl-timemarker').each(function(i, elem){
    $(this).attr('data-tlBlipIndex', blipIds[i])
  });

  $('.tl-slide.tl-slide-text-only').each(function(i, elem){
    $(this).attr('data-tlBlipIndex', blipIds[i])
  });
  // End Indexing

  // Add a carousel with user content inside timeline
  for(var i in window.blipsIndexer){
    var id = window.blipsIndexer[i].id;

    if(window.blipsIndexer[i].images.length > 0){
      var c = '<div id="images-carousel-'+ i +'" class="hidden carousel slide" data-ride="carousel">' + 
                '<div class="carousel-inner" role="listbox">';

      for(var x in window.blipsIndexer[i].images){
        c += '<div class="item">' + window.blipsIndexer[i].images[x] + '</div>';
      }

      // if blip has more than one image, add indicators
      if( window.blipsIndexer[i].images.length > 1 ){
      	c += '<ol class="carousel-indicators">';
	      
	      for(var y in window.blipsIndexer[i].images.length){
	        c +=  '<li data-target="#images-carousel-'+ i +'" data-slide-to="'+ y +'"></li>';
	      }
	      c +=  '</ol><a class="left carousel-control" href="#images-carousel-'+ i +'" role="button" data-slide="prev">' +
	              '<span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>' +
	              '<span class="sr-only">Previous</span>' +
	            '</a>' +
	            '<a class="right carousel-control" href="#images-carousel-'+ i +'" role="button" data-slide="next">' +
	              '<span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>' +
	              '<span class="sr-only">Next</span>' +
	            '</a>';
	      c += '</div></div>';
      }
    }

    $('.tl-slide[data-tlBlipIndex="'+ id +'"]').empty();
    $('.tl-slide[data-tlBlipIndex="'+ id +'"]').html(c);
    $('.carousel .item:first-child').addClass('active');

    // todo, add a condition to handle imageless blips
  } // end carousel

	/* Timeline Event Listeners */
	// When timeline changes, update Map and menu of blips
	timeline.on("change", function(data) {
	  var unique_id = data.unique_id;
	  var targetBlipId = $('#' + unique_id + '-marker').attr('data-tlBlipIndex');
	  var tlBlip = getBlip(targetBlipId);

	  if(tlBlip){
	    // reveal stop title and body in waypoint menu
	    wayPtShow(tlBlip.id);

	    for(var i in window.blipsIndexer)
	      window.blipsIndexer[i].marker.setIcon(window.blueMarker);

	    tlBlip.popup.openOn(window.map);
	    tlBlip.marker.setIcon(window.maroonMarker);
	    $('.carousel').addClass('hidden');

	    setTimeout(function(){
	      $('.tl-slide[data-tlBlipIndex="'+ targetBlipId +'"] .carousel').removeClass('hidden');
	    }, 500);
		}
	});

	/* when user clicks waypoint <li>, update map and timeline */
	$('li.blip').on('click', function(){
	  if( $(this).data('blip') !== undefined){
	    for(var i in window.blipsIndexer)
	      window.blipsIndexer[i].marker.setIcon(window.blueMarker);
	    
	    var blipSlide = $(this).data('blipslide') + 1;
	    var id = $(this).data('blip');

	    var blip = getBlip(id);
	    if(blip){
				blip.popup.openOn(window.map);
				blip.marker.setIcon(window.maroonMarker);
		    wayPtShow(id);
		    /* update timeline */
		    timeline.goTo(blipSlide)
	    }
	  }
	});
}

function wayPtShow (id){
	var blip = getBlip(id);

	if( blip ){
	  var title  = blip.title.replace(/&quot;/g, '');
	  var blipId = blip.id;
	  $('.route-header').text(title);
	  $('p.route-stop-body').addClass('hidden');
	  $('li.blip[data-blip="'+ blipId +'"] p.route-stop-body').removeClass('hidden');
  }
}

function getBlip(id){
	for(var x in window.blipsIndexer){
		if( window.blipsIndexer[x].id == id ){ return window.blipsIndexer[x]; }		
	}
	return false;
}

function flash_now(type, message){
	console.log("type: " + type + "\n message: " + message);

	var flash_msg = '<div style="margin:0; width:100%" class="flash-messages flash-'+ type +' col-lg-12 col-md-12 col-sm-12 col-xs-12"><p class="flash">'+ message +'</p></div>';
	$('.application-container').prepend(flash_msg).removeClass('hidden');
}

function xss_trim(str){
	return String(str)
	.replace(/&/g, '&amp;')
	.replace(/"/g, '&quot;')
	.replace(/'/g, '&#39;')
	.replace(/</g, '&lt;')
	.replace(/>/g, '&gt;')
	.replace('/', '&#x2F');
}
